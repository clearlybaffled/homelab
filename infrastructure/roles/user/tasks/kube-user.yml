---
- name: Check for existing user
  delegate_to: "{{ groups.kube_control_plane | random }}"
  connection: ssh
  become: true
  kubernetes.core.k8s_info:
    kind: CertificateSigningRequest
    name: "{{ kube_user }}"
    api_version: certificates.k8s.io/v1
    kubeconfig: "{{ kubeconfig_file }}"
    ca_cert: "{{ kube_cluster_cacerts }}"
  register: user_status

- name: Create User
  when: not user_status.resources
  block:
    - name: user | Generate private key
      community.crypto.openssl_privatekey_pipe:
        type: Ed25519
      register: private_key

    - name: user | Generate CSR
      community.crypto.openssl_csr_pipe:
        privatekey_content: "{{ private_key.privatekey }}"
        common_name: "{{ kube_user }}"
        organization_name: service:masters
      register: csr

    - name: user | Create ClusterRoleBinding
      delegate_to: "{{ groups.kube_control_plane | random }}"
      connection: ssh
      become: true
      kubernetes.core.k8s:
        template: crb.yml.j2
        kubeconfig: "{{ kubeconfig_file }}"
        ca_cert: "{{ kube_cluster_cacerts }}"

    - name: user | Send CSR to Kubernetes
      include_role:
        name: kubernetes/control_plane
        tasks_from: approve-cert.yml
      vars:
        name: "{{ kube_user }}"

    - name: user | Create kubeconfig file
      set_fact:
        kubeconfig_str: "{{ lookup('ansible.builtin.template', 'kubeconfig.yml.j2') }}"
  always:
    - name: Make sure that output (which contains the private key) is overwritten
      set_fact:
        private_key: ''
        csr: ''
        certificate: ''

- name: Make sure kubeconfig is set
  set_fact:
    kubeconfig: "{{ kubeconfig_str | default('') }}"
